package cn.nju.seg.zhangyf.lfftest

import javax.annotation.{ Nonnull, ParametersAreNonnullByDefault }

import java.lang.Math._

/**
  * @author Zhang Yifan
  */
@ParametersAreNonnullByDefault
final class TsafeTest {

  //region Conflict

  @Nonnull
  private def testConflict(name: String)
                          (pathCondition: Array[Double] => Boolean)
  : Option[Array[Double]] = {
    val solveRes: Option[Array[Double]] = TsafeTest.cwConflictTestCases.find { pathCondition }
    if (solveRes.isDefined) {
      println(s"CW solve Tsafe Conflict $name with : ${ solveRes.get.mkString(",") }")
    } else {
      println(s"CW can not solve Tsafe Conflict $name.")
    }
    solveRes
  }

  def testConflict01(): Unit = {
    val solveRes: Option[Array[Double]] =
      this.testConflict("01") { startPoint =>
        val Array(psi1_1_SYMREAL, vA_2_SYMREAL, vC_3_SYMREAL, xC0_4_SYMREAL, yC0_5_SYMREAL, psiC_6_SYMREAL, bank_ang_7_SYMREAL) = startPoint
        //region  @formatter:off
        exp(pow(xC0_4_SYMREAL + ((1.0 * ((pow(vC_3_SYMREAL, 2.0) / tan(0.017453292519943295 * bank_ang_7_SYMREAL)) / 68443.0)) * (cos(psiC_6_SYMREAL) - cos(psiC_6_SYMREAL + (((1.0 * (((0.0 - (0.017453292519943295 * psi1_1_SYMREAL)) * ((pow(vA_2_SYMREAL, 2.0) / tan(0.017453292519943295 * bank_ang_7_SYMREAL)) / 68443.0)) / vA_2_SYMREAL)) * vC_3_SYMREAL) / ((pow(vC_3_SYMREAL, 2.0) / tan(0.017453292519943295 * bank_ang_7_SYMREAL)) / 68443.0))))) - ((-1.0 * ((pow(vA_2_SYMREAL, 2.0) / tan(0.017453292519943295 * bank_ang_7_SYMREAL)) / 68443.0)) * (1.0 - cos(0.017453292519943295 * psi1_1_SYMREAL))), 2.0) + pow((yC0_5_SYMREAL - ((1.0 * ((pow(vC_3_SYMREAL, 2.0) / tan(0.017453292519943295 * bank_ang_7_SYMREAL)) / 68443.0)) * (sin(psiC_6_SYMREAL) - sin(psiC_6_SYMREAL + (((1.0 * (((0.0 - (0.017453292519943295 * psi1_1_SYMREAL)) * ((pow(vA_2_SYMREAL, 2.0) / tan((0.017453292519943295 * bank_ang_7_SYMREAL))) / 68443.0)) / vA_2_SYMREAL)) * vC_3_SYMREAL) / ((pow(vC_3_SYMREAL, 2.0) / tan( 0.017453292519943295 * bank_ang_7_SYMREAL )) / 68443.0)))))) - ((-1.0 * ((pow(vA_2_SYMREAL, 2.0) / tan(0.017453292519943295 * bank_ang_7_SYMREAL)) / 68443.0)) * sin(0.017453292519943295 * psi1_1_SYMREAL)), 2.0)) < 999.0 && ((pow(vC_3_SYMREAL, 2.0) / tan(0.017453292519943295 * bank_ang_7_SYMREAL)) / 68443.0) != 0.0 && vA_2_SYMREAL != 0.0 && tan(0.017453292519943295 * bank_ang_7_SYMREAL) != 0.0 && tan(0.017453292519943295 * bank_ang_7_SYMREAL) != 0.0 && (0.017453292519943295 * psi1_1_SYMREAL) < 0.0
        //endregion  @formatter:on
      }
  }

  //endregion Conflict

  //region 

  @Nonnull
  private def testTurnLogic(name: String)
                           (pathCondition: Array[Double] => Boolean)
  : Option[Array[Double]] = {
    val solveRes: Option[Array[Double]] = TsafeTest.cwTurnLogicTestCases.find { pathCondition }
    if (solveRes.isDefined) {
      println(s"CW solve Tsafe Conflict $name with : ${ solveRes.get.mkString(",") }")
    } else {
      println(s"CW can not solve Tsafe Conflict $name.")
    }
    solveRes
  }

  //endregion

  @org.testng.annotations.BeforeClass
  def setUp(): Unit = {}

  @org.testng.annotations.AfterClass
  def tearDown(): Unit = {}
}

private object TsafeTest {

  val cwConflictTestCases: Vector[Array[Double]] =
    Vector(Array(0.0, 0, 0, 0, 0, 0, 0.0),
           Array(0.0, 0.0, 0, 0, 0, 0, 7.8026525057390295),
           Array(0.0, -8.0, 0.0, 0, 0, 0, 103.0483410559232),
           Array(0.0, -8.0, 0.2577872655201557, 0.0, 0.0, 0.0, 633.6570391706282),
           Array(0.0, -8.0, 11.675452495980505, 2.0, 0.0, 0.0, 56.026483787610346),
           Array(0.0, -8.0, 13.007543012240351, 2.8199999999997045, 0.0, 0.0, 1.8066056832227888),
           Array(0.0, -8.0, 238.98562142761074, 3366.6300000088445, 0.0, 0.0, 13.910096467286678),
           Array(0.0, -8.0, 46.09065470871978, 999.0, 0.0, 0.0, 2.2641338308553243),
           Array(5.729577951308231E-5, 0, 0, 0, 0, 0, 0.0),
           Array(5.729577951308231E-5, 0.0, 0, 0, 0, 0, 0.010601284703959874),
           Array(5.729577951308231E-5, -8.0, 0.0, 0, 0, 0, 0.004104661866178598),
           Array(5.729577951308231E-5, -8.0, 0.004882482888570235, 0.0, 0.0, 0.0, 0.5649062675517161),
           Array(5.729577951308231E-5, -8.0, -1151393.835746069, 0.0, 0.0, 0.0, 0.0038554446111259506),
           Array(5.729577951308231E-5, -8.0, 2.309902413016171E12, 0.0, 0.0, 0.0, 5.7373170526015),
           Array(5.729577951308231E-5, -8.0, 2.654895063788914E13, 0.0, 0.0, 0.0, 72.15523981299768),
           Array(5.729577951308231E-5, -8.0, 4336178.8087261645, 0.0, 0.0, 0.0, 0.0043490753859633914),
           Array(-7.999976126186667, -8.0, -6.956418256460201, 0.0, 0.0, -7.484673467313033E-16, 7.152299188162919E-4),
           Array(-8.0, 0, 0, 0, 0, 0, 0.0),
           Array(-8.0, 0.0, 0, 0, 0, 0, 1456.5350955774738),
           Array(-8.0, -8.0, 0.0, 0, 0, 0, 0.24610437278461775),
           Array(-8.0, -8.0, 1804.7115420614552, 0.0, 0.0, 0.0, 14.246466560773246),
           Array(-8.0, -8.0, 384.6739356718183, 5.015466584677637E-12, 0.0, 0.0, 3.675275996186175E-4),
           Array(-8.0, -8.0, 544.3425580053249, 0.0, 0.0, 0.0, 0.23058904129158647),
           Array(-8.0, -8.0, 5799354.949400331, 0.0, 0.0, 0.0, 3.5205540257840755))

  val cwTurnLogicTestCases: Vector[Array[Double]] =
    Vector(Array(1292.434143341451, 0.0, 0, -8.0, -1.0, -7.999999000000001, 0.0, 0),
           Array(1.7976931348623157E308, 0.0, 0, -8.0, 1.7976931348623157E308, -7.999999000000001, 0.0, 0),
           Array(-7.9999980000000015, 0.0, 0, -7.999999000000001, 0.0, -8.0, 0.0, 0),
           Array(-7.9999980000000015, 0.0, 0, -7.999999000000001, 1.7976931348623157E308, -8.0, 0.0, 0),
           Array(-7.9999980000000015, 1.7976931348623157E308, 0, -7.999999000000001, 0.0, -8.0, 0.0, 0),
           Array(-7.9999980000000015, 1.7976931348623157E308, 0, -7.999999000000001, -1748056.2542076393, -8.0, 1.7976931348623157E308, 0),
           Array(-7.999999000000001, 0.0, 0, -8.0, 0.0, -7.999999000000001, 0.0, 0),
           Array(-7.999999000000001, 0.0, 0, -8.0, -1.0, -7.999999000000001, 0.0, 0),
           Array(-7.999999000000001, 0.0, 0, -8.0, 1.7976931348623157E308, -7.999999000000001, 0.0, 0),
           Array(-7.999999000000001, 0.0, 0, -8.0, -7.999999000000001, -8.0, -8.0, 0),
           Array(-7.999999000000001, 0.0, 0, -8.0, -8.0, -8.0, -7.999999000000001, 0),
           Array(-7.999999000000001, 0.0, 0, -8.0, -8.0, -8.0, -8.0, 0),
           Array(-7.999999000000001, 0.01420966610246878, 0, -8.0, -141.42464946320132, -7.999999000000001, 0.0, 0),
           Array(-7.999999000000001, 1.1437031658548176, 0, -8.0, 0.0, -7.999999000000001, 0.0, 0),
           Array(-7.999999000000001, -1.4149341923077603, 0, -8.0, 0.0, -7.999999000000001, 0.0, 0),
           Array(-7.999999000000001, 1.7976931348623157E308, 0, -8.0, 0.0, -7.999999000000001, 0.0, 0),
           Array(-7.999999000000001, 1.7976931348623157E308, 0, -8.0, -7.999999000000001, -8.0, -8.0, 0),
           Array(-7.999999000000001, 1.7976931348623157E308, 0, -8.0, -8.0, -8.0, -7.999999000000001, 0),
           Array(-7.999999000000001, 1.7976931348623157E308, 0, -8.0, -8.0, -8.0, -8.0, 0),
           Array(-7.999999000000002, -7.999999000000001, 0, -7.999999000000001, -8.0, -8.0, 0, 0),
           Array(-7.999999000000002, -8.0, 0, -7.999999000000001, -7.999999000000001, -8.0, 0, 0),
           Array(-7.999999999999845, 0.0, 0, -8.0, -1236.098872213559, -7.999999000000001, 0.0, 0),
           Array(-8.0, 0.0, 0, -7.999999000000001, 0.0, -7.9999980000000015, 0.0, 0),
           Array(-8.0, 0.0, 0, -7.999999000000001, 0.0, -7.999998999999963, -255.89046158025647, 0),
           Array(-8.0, 0.0, 0, -7.999999000000001, 0.0, -8.0, 0.0, 0),
           Array(-8.0, 0.0, 0, -7.999999000000001, -1.0, -7.9999980000000015, 0.0, 0),
           Array(-8.0, 0.0, 0, -7.999999000000001, 1.7976931348623157E308, -7.9999980000000015, 0.0, 0),
           Array(-8.0, 0.0, 0, -7.999999000000001, 1.7976931348623157E308, -8.0, 0.0, 0),
           Array(-8.0, 0.0, 0, -7.999999000000001, 61611.23651449675, -7.999998999985639, 0.0, 0),
           Array(-8.0, 0.0, 0, -7.999999000000001, -7.999999000000001, -7.999999000000002, -8.0, 0),
           Array(-8.0, 0.0, 0, -7.999999000000001, -8.0, -7.999999000000002, -7.999999000000001, 0),
           Array(-8.0, 0.0, 0, -7.999999000000001, -8.0, -7.999999000000002, -8.0, 0),
           Array(-8.0, 0.0, 0, -7.999999000000001, -9.258448689038386E-4, -8.0, 0.0, 0),
           Array(-8.0, 0.0, 0, -7.999999999999954, 0.0, -8.0, -796.7499147496787, 0),
           Array(-8.0, 0.0, 0, -7.999999999999977, -255.2205006803141, -8.0, 0.0, 0),
           Array(-8.0, -0.31394029705617066, 0, 1.7976931348623157E308, 0.0, -8.0, 0.0, 0),
           Array(-8.0, -1.0, 0, -7.999999000000001, 0.0, -7.9999980000000015, 0.0, 0),
           Array(-8.0, -1.0, 0, -7.999999000000001, 0.0, -8.0, 0.0, 0),
           Array(-8.0, 102.71357836490404, 0, -7.999999000000001, 0.0, -8.0, 0.0, 0),
           Array(-8.0, 1.7976931348623157E308, 0, -7.999999000000001, 0.0, -7.9999980000000015, 0.0, 0),
           Array(-8.0, 1.7976931348623157E308, 0, -7.999999000000001, 0.0, -8.0, 0.0, 0),
           Array(-8.0, 1.7976931348623157E308, 0, -7.999999000000001, -1.0322234159574042, -7.9999980000000015, 0.0, 0),
           Array(-8.0, 1.7976931348623157E308, 0, -7.999999000000001, -1082779.5531579861, -7.9999980000000015, 1.7976931348623157E308, 0),
           Array(-8.0, 1.7976931348623157E308, 0, -7.999999999999997, 0.0, -8.0, -382.65146769107514, 0),
           Array(-8.0, -7.9999980000000015, 0, -8.0, -7.999999000000001, -8.0, -8.0, 0),
           Array(-8.0, -7.999999000000001, 0, -8.0, -8.0, -7.999999000000001, 0.0, 0),
           Array(-8.0, -7.999999000000001, 0, -8.0, -8.0, -7.999999000000001, 1.7976931348623157E308, 0),
           Array(-8.0, -7.999999000000001, 0, -8.0, -8.0, -8.0, -7.999999000000001, 0),
           Array(-8.0, -7.999999000000001, 0, -8.0, -8.0, -8.0, -8.0, 0),
           Array(-8.0, -8.0, 0, -8.0, 1.7976931348623157E308, -7.999999000000001, 0.0, 0),
           Array(-8.0, -8.0, 0, -8.0, 451.48780737216396, -7.999999000000001, 0.0, 0),
           Array(-8.0, -8.0, 0, -8.0, -7.999999000000001, -7.999999000000001, 0.0, 0),
           Array(-8.0, -8.0, 0, -8.0, -7.999999000000001, -8.0, -7.9999980000000015, 0),
           Array(-8.0, -8.0, 0, -8.0, -7.999999000000001, -8.0, -7.999999000000002, 0),
           Array(-8.0, -8.0, 0, -8.0, -7.999999000000001, -8.0, -8.0, 0),
           Array(-8.0, -8.0, 0, -8.0, -8.0, 0, 0, 0),
           Array(86.92268081810761, 0.14643285486101443, 0, -7.884016483217668, 2162223.8515410097, -7.884016483351377, 0.0024750595335540845, 0))
}
